<?xml version="1.0" encoding="utf-8"?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from test_snippets.urdf.xacro       | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<!-- 
        Author: Dr. -Ing. Ahmad Kamal Nasir
        Email: dringakn@gmail.com
        Description: To Generate the URDF file, use the following command
                     xacro test_snippets.urdf.xacro -o test_snippets.urdf
-->
<robot name="Test_Robot">
  <!-- 
        Author: Dr. -Ing. Ahmad Kamal Nasir
        Email: dringakn@gmail.com
        Desciption: Xacro snippits for various URDF tags.
    -->
  <!-- Macro Template -->
  <!-- <xacro:macro name="robot_link" params="name:=MyRobot m:=1 w:=1 l:=1 h:=1 *first *second **vis **col **ine">
        <link name="${name}_macro">
            <xacro:insert_block name="ine"/>
            <xacro:insert_block name="vis"/>
            <xacro:insert_block name="col"/>
            <xacro:insert_block name="first"/>
            <xacro:insert_block name="second"/>
        </link>
    </xacro:macro> -->
  <!-- Use Macro Template: Disable -->
  <!-- <xacro:robot_link name="test">
        <first_element />
        <second_element />
        <vis>
            <vis_block></vis_block>
        </vis>
        <col>
            <col_block></col_block>
        </col>
        <ine>
            <ine_block></ine_block>
        </ine>
    </xacro:robot_link> -->
  <!-- Create links: w:x-axis, l:y-axis, h:z-axis -->
  <link name="base_link"/>
  <link name="chassis">
    <!-- <origin xyz="${xyz}" rpy="${rpy}"/> -->
    <inertial>
      <mass value="1"/>
      <inertia ixx="0.00354166666667" ixy="0.0" ixz="0.0" iyy="0.0135416666667" iyz="0.0" izz="0.0166666666667"/>
    </inertial>
    <visual>
      <geometry>
        <box size="0.4 0.2 0.05"/>
      </geometry>
      <material name="0 0 1 0.5">
        <color rgba="0 0 1 0.5"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.4 0.2 0.05"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="chassis">
    <material>Gazebo/Blue</material>
  </gazebo>
  <link name="left_wheel">
    <!-- <origin xyz="${xyz}" rpy="${rpy}"/> -->
    <inertial>
      <mass value="0.1"/>
      <inertia ixx="0.000270833333333" ixy="0.0" ixz="0.0" iyy="0.000270833333333" iyz="0.0" izz="0.0005"/>
    </inertial>
    <visual>
      <geometry>
        <cylinder length="0.05" radius="0.1"/>
      </geometry>
      <material name="0 1 0 1">
        <color rgba="0 1 0 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.05" radius="0.1"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="left_wheel">
    <material>Gazebo/Green</material>
  </gazebo>
  <link name="right_wheel">
    <!-- <origin xyz="${xyz}" rpy="${rpy}"/> -->
    <inertial>
      <mass value="0.1"/>
      <inertia ixx="0.000270833333333" ixy="0.0" ixz="0.0" iyy="0.000270833333333" iyz="0.0" izz="0.0005"/>
    </inertial>
    <visual>
      <geometry>
        <cylinder length="0.05" radius="0.1"/>
      </geometry>
      <material name="0 1 0 1">
        <color rgba="0 1 0 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.05" radius="0.1"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="right_wheel">
    <material>Gazebo/Green</material>
  </gazebo>
  <link name="front_castor">
    <!-- <origin xyz="${xyz}" rpy="${rpy}"/> -->
    <inertial>
      <mass value="0.05"/>
      <inertia ixx="5e-05" ixy="0.0" ixz="0.0" iyy="5e-05" iyz="0.0" izz="5e-05"/>
    </inertial>
    <visual>
      <geometry>
        <sphere radius="0.05"/>
      </geometry>
      <material name="1 0 0 1">
        <color rgba="1 0 0 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <sphere radius="0.05"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="front_castor">
    <material>Gazebo/Red</material>
  </gazebo>
  <joint name="joint_base_link_chassis" type="fixed">
    <parent link="base_link"/>
    <child link="chassis"/>
    <origin rpy="0 0 0" xyz="0.1 0 0"/>
  </joint>
  <joint name="joint_chassis_left_wheel" type="continuous">
    <parent link="chassis"/>
    <child link="left_wheel"/>
    <axis xyz="0 0 -1"/>
    <origin rpy="1.57 0 0" xyz="-0.1 0.125 0"/>
  </joint>
  <joint name="joint_chassis_right_wheel" type="continuous">
    <parent link="chassis"/>
    <child link="right_wheel"/>
    <axis xyz="0 0 -1"/>
    <origin rpy="1.57 0 0" xyz="-0.1 -0.125 0"/>
  </joint>
  <joint name="joint_chassis_front_castor" type="fixed">
    <parent link="chassis"/>
    <child link="front_castor"/>
    <origin rpy="0 0 0" xyz="0.15 0 -0.05"/>
  </joint>
  <gazebo reference="front_castor">
    <!-- Castor Wheel slippage -->
    <mu1 value="0"/>
    <mu2 value="0"/>
    <kp value="1000000000.0"/>
    <kd value="0"/>
    <fdir1 value="0 0 0"/>
  </gazebo>
  <gazebo>
    <!-- Differential Drive Plugin -->
    <plugin filename="libgazebo_ros_diff_drive.so" name="differential_drive_controller">
      <!-- Plugin update rate in Hz -->
      <!-- <updateRate>${update_rate}</updateRate> -->
      <updateRate>40</updateRate>
      <!-- Name of left joint, defaults to `left_joint` -->
      <leftJoint>joint_chassis_left_wheel</leftJoint>
      <!-- Name of right joint, defaults to `right_joint` -->
      <rightJoint>joint_chassis_right_wheel</rightJoint>
      <!-- The distance from the center of one wheel to the other, in meters, defaults to 0.34 m -->
      <wheelSeparation>0.25</wheelSeparation>
      <!-- Diameter of the wheels, in meters, defaults to 0.15 m -->
      <wheelDiameter>0.1</wheelDiameter>
      <!-- Wheel acceleration, in rad/s^2, defaults to 0.0 rad/s^2 -->
      <wheelAcceleration>1.0</wheelAcceleration>
      <!-- Maximum torque which the wheels can produce, in Nm, defaults to 5 Nm -->
      <wheelTorque>1</wheelTorque>
      <!-- Topic to receive geometry_msgs/Twist message commands, defaults to `cmd_vel` -->
      <commandTopic>cmd_vel</commandTopic>
      <!-- Topic to publish nav_msgs/Odometry messages, defaults to `odom` -->
      <odometryTopic>odom</odometryTopic>
      <!-- Odometry frame, defaults to `odom` -->
      <odometryFrame>odom</odometryFrame>
      <!-- Robot frame to calculate odometry from (Chassis link), defaults to `base_footprint` -->
      <robotBaseFrame>base_link</robotBaseFrame>
      <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
      <odometrySource>world</odometrySource>
      <!-- Set to true to publish transforms for the wheel links, defaults to false -->
      <publishWheelTF>true</publishWheelTF>
      <!-- Set to true to publish transforms for the odometry, defaults to true -->
      <publishOdom>true</publishOdom>
      <!-- Set to true to publish sensor_msgs/JointState on /joint_states for the wheel joints, defaults to false -->
      <publishWheelJointState>true</publishWheelJointState>
      <!-- Set to true to swap right and left wheels, defaults to true -->
      <legacyMode>true</legacyMode>
      <rosDebugLevel>false</rosDebugLevel>
      <publishOdomTF>true</publishOdomTF>
      <publishTf>1</publishTf>
    </plugin>
  </gazebo>
  <link name="front_camera">
    <!-- <origin xyz="${xyz}" rpy="${rpy}"/> -->
    <inertial>
      <mass value="0.05"/>
      <inertia ixx="2.08333333333e-05" ixy="0.0" ixz="0.0" iyy="2.08333333333e-05" iyz="0.0" izz="2.08333333333e-05"/>
    </inertial>
    <visual>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
      <material name="1 0 0 1">
        <color rgba="1 0 0 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="front_camera">
    <material>Gazebo/Red</material>
  </gazebo>
  <joint name="joint_chassis_front_camera" type="fixed">
    <parent link="chassis"/>
    <child link="front_camera"/>
    <origin rpy="0 0 0" xyz="0.15 0 0.05"/>
  </joint>
  <gazebo reference="front_camera">
    <sensor name="camera_sensor" type="camera">
      <visualize>True</visualize>
      <update_rate>10</update_rate>
      <camera name="head">
        <horizontal_fov>1.0471975512</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.01</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
                             That pixel's noise value is added to each of its color
                             channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.000</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
        <alwaysOn>true</alwaysOn>
        <updateRate>10</updateRate>
        <cameraName>front_camera</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
  <link name="velodyne_lidar">
    <!-- <origin xyz="${xyz}" rpy="${rpy}"/> -->
    <inertial>
      <mass value="0.05"/>
      <inertia ixx="2.08333333333e-05" ixy="0.0" ixz="0.0" iyy="2.08333333333e-05" iyz="0.0" izz="2.08333333333e-05"/>
    </inertial>
    <visual>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
      <material name="1 0 0 1">
        <color rgba="1 0 0 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.05 0.05 0.05"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="velodyne_lidar">
    <material>Gazebo/Red</material>
  </gazebo>
  <joint name="joint_chassis_velodyne_lidar" type="fixed">
    <parent link="chassis"/>
    <child link="velodyne_lidar"/>
    <origin rpy="0 0 0" xyz="0.15 0 0.15"/>
  </joint>
  <gazebo reference="velodyne_lidar">
    <sensor name="front_lidar-VLP16" type="gpu_ray">
      <visualize>false</visualize>
      <update_rate>20</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1</resolution>
            <min_angle>-3.14159</min_angle>
            <max_angle>3.14159</max_angle>
          </horizontal>
          <vertical>
            <samples>360</samples>
            <resolution>1</resolution>
            <min_angle>-0.261799387799</min_angle>
            <max_angle> 0.261799387799</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.1</min>
          <max>100</max>
          <resolution>0.05</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.0</stddev>
        </noise>
      </ray>
      <plugin filename="libgazebo_ros_velodyne_gpu_laser.so" name="gazebo_ros_laser_controller">
        <topicName>/velodyne_points</topicName>
        <frameName>velodyne_lidar</frameName>
        <min_range>0.1</min_range>
        <max_range>100</max_range>
        <gaussianNoise>0</gaussianNoise>
      </plugin>
    </sensor>
  </gazebo>
  <!-- <xacro:shape_link name="box1" type="box" m="1" w="1" l="1" h="1" rgba="0 0 1 ${alpha}" xyz="2 2 1" color="Blue"/>
 -->
  <!-- <xacro:shape_joint type="floating" parent="base_link" child="box1" xyz="2 2 -1"/> -->
</robot>
